# RUN: llc -march=x86-64 -simplify-mir --load=%llvmshlibdir/X86SavotinaInstrCounterPass%shlibext -run-pass=x86-savotina-instr-counter %s -o - | FileCheck %s

--- |
  ; ModuleID = 'tests.ll'
  source_filename = "tests.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  @ic = dso_local global i64 0, align 8
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z4FuncTest1iii(i32 noundef %a, i32 noundef %b, i32 noundef %c) #0 {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    %c.addr = alloca i32, align 4
    %d = alloca i32, align 4
    %i = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    store i32 %c, ptr %c.addr, align 4
    store i32 0, ptr %d, align 4
    store i32 0, ptr %i, align 4
    br label %for.cond
  
  for.cond:                                         ; preds = %for.inc, %entry
    %0 = load i32, ptr %i, align 4
    %1 = load i32, ptr %a.addr, align 4
    %cmp = icmp slt i32 %0, %1
    br i1 %cmp, label %for.body, label %for.end
  
  for.body:                                         ; preds = %for.cond
    %2 = load i32, ptr %d, align 4
    %3 = load i32, ptr %b.addr, align 4
    %cmp1 = icmp slt i32 %2, %3
    br i1 %cmp1, label %if.then, label %if.end
  
  if.then:                                          ; preds = %for.body
    %4 = load i32, ptr %c.addr, align 4
    %5 = load i32, ptr %d, align 4
    %add = add nsw i32 %5, %4
    store i32 %add, ptr %d, align 4
    br label %if.end
  
  if.end:                                           ; preds = %if.then, %for.body
    br label %for.inc
  
  for.inc:                                          ; preds = %if.end
    %6 = load i32, ptr %i, align 4
    %inc = add nsw i32 %6, 1
    store i32 %inc, ptr %i, align 4
    br label %for.cond, !llvm.loop !6
  
  for.end:                                          ; preds = %for.cond
    %7 = load i32, ptr %d, align 4
    ret i32 %7
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z5FuncTest2Ri(ptr noundef nonnull align 4 dereferenceable(4) %tevirp) #0 {
  entry:
    %tevirp.addr = alloca ptr, align 8
    %res = alloca i32, align 4
    %privet = alloca i32, align 4
    store ptr %tevirp, ptr %tevirp.addr, align 8
    store i32 0, ptr %res, align 4
    %0 = load ptr, ptr %tevirp.addr, align 8
    %1 = load i32, ptr %0, align 4
    %rem = srem i32 %1, 10
    store i32 %rem, ptr %privet, align 4
    %2 = load ptr, ptr %tevirp.addr, align 8
    %3 = load i32, ptr %2, align 4
    %div = sdiv i32 %3, 10
    store i32 %div, ptr %2, align 4
    %4 = load ptr, ptr %tevirp.addr, align 8
    %5 = load i32, ptr %4, align 4
    %cmp = icmp slt i32 %5, 17
    br i1 %cmp, label %if.then, label %if.else
  
  if.then:                                          ; preds = %entry
    %6 = load i32, ptr %privet, align 4
    store i32 %6, ptr %res, align 4
    br label %if.end
  
  if.else:                                          ; preds = %entry
    %7 = load ptr, ptr %tevirp.addr, align 8
    %8 = load i32, ptr %7, align 4
    store i32 %8, ptr %res, align 4
    br label %if.end
  
  if.end:                                           ; preds = %if.else, %if.then
    %9 = load i32, ptr %res, align 4
    ret i32 %9
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef zeroext i1 @_Z5FuncTest3i(i32 noundef %par) #0 {
  entry:
    %par.addr = alloca i32, align 4
    %res = alloca i8, align 1
    store i32 %par, ptr %par.addr, align 4
    store i8 0, ptr %res, align 1
    %0 = load i32, ptr %par.addr, align 4
    %cmp = icmp sgt i32 %0, 0
    br i1 %cmp, label %if.then, label %if.end
  
  if.then:                                          ; preds = %entry
    store i8 1, ptr %res, align 1
    br label %if.end
  
  if.end:                                           ; preds = %if.then, %entry
    %1 = load i8, ptr %res, align 1
    %tobool = trunc i8 %1 to i1
    ret i1 %tobool
  }
  
  attributes #0 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"clang version 17.0.6 (https://github.com/Savotina/llvm-nnsu-2024.git 0a52e2cdca9281799695476a5d02b93853667dee)"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}

...
---
name:            _Z4FuncTest1iii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$edi', virtual-reg: '' }
  - { reg: '$esi', virtual-reg: '' }
  - { reg: '$edx', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: a.addr, type: default, offset: -36, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: -32, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: c.addr, type: default, offset: -28, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: d, type: default, offset: -20, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: i, type: default, offset: -24, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $edi, $edx, $esi
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store (s32) into %ir.a.addr)
    MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $esi :: (store (s32) into %ir.b.addr)
    MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edx :: (store (s32) into %ir.c.addr)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.d)
    MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.i)

    ; CHECK: frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK: frame-setup CFI_INSTRUCTION offset $rbp, -16
    ; CHECK: $rbp = frame-setup MOV64rr $rsp
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    ; CHECK: MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store (s32) into %ir.a.addr)
    ; CHECK: MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $esi :: (store (s32) into %ir.b.addr)
    ; CHECK: MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edx :: (store (s32) into %ir.c.addr)
    ; CHECK: MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.d)
    ; CHECK: MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.i)
    ; CHECK: ADD64ri32 10, &ic, implicit-def $eflags
  
  bb.1.for.cond:
    successors: %bb.6(0x40000000), %bb.2(0x40000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.i)
    CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.a.addr)
    JCC_1 %bb.6, 13, implicit killed $eflags

    ; CHECK: renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.i)
    ; CHECK: CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.a.addr)
    ; CHECK: ADD64ri32 3, &ic, implicit-def $eflags
    ; CHECK: JCC_1 %bb.6, 13, implicit killed $eflags
  
  bb.2.for.body:
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.d)
    CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.b.addr)
    JCC_1 %bb.4, 13, implicit killed $eflags

    ; CHECK: renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.d)
    ; CHECK: CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.b.addr)
    ; CHECK: ADD64ri32 3, &ic, implicit-def $eflags
    ; CHECK: JCC_1 %bb.4, 13, implicit killed $eflags

  bb.3.if.then:
    successors: %bb.4(0x80000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.c.addr)
    renamable $eax = ADD32rm killed renamable $eax, $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.d)
    MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.d)

    ; CHECK: renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.c.addr)
    ; CHECK: renamable $eax = ADD32rm killed renamable $eax, $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.d)
    ; CHECK: MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.d)
    ; CHECK: ADD64ri32 3, &ic, implicit-def $eflags

  bb.4.if.end:
    successors: %bb.5(0x80000000)
  
    JMP_1 %bb.5
    
    ; CHECK: ADD64ri32 1, &ic, implicit-def $eflags
    ; CHECK: JMP_1 %bb.5
  
  bb.5.for.inc:
    successors: %bb.1(0x80000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.i)
    renamable $eax = ADD32ri killed renamable $eax, 1, implicit-def dead $eflags
    MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.i)
    JMP_1 %bb.1

    ; CHECK: renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.i)
    ; CHECK: renamable $eax = ADD32ri killed renamable $eax, 1, implicit-def dead $eflags
    ; CHECK: MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.i)
    ; CHECK: ADD64ri32 4, &ic, implicit-def $eflags
    ; CHECK: JMP_1 %bb.1

  bb.6.for.end:
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.d)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $eax

    ; CHECK: renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.d)
    ; CHECK: $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    ; CHECK: frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    ; CHECK: ADD64ri32 4, &ic, implicit-def $eflags
    ; CHECK: RET64 implicit $eax

...
---
name:            _Z5FuncTest2Ri
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$rdi', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: tevirp.addr, type: default, offset: -32, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: res, type: default, offset: -20, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: privet, type: default, offset: -36, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rdi :: (store (s64) into %ir.tevirp.addr)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.res)
    renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.tevirp.addr)
    renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.0)
    renamable $ecx = MOV32ri 10
    CDQ implicit-def $eax, implicit-def $edx, implicit $eax
    IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
    MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edx :: (store (s32) into %ir.privet)
    renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.tevirp.addr)
    renamable $eax = MOV32rm renamable $rcx, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
    renamable $esi = MOV32ri 10
    CDQ implicit-def $eax, implicit-def $edx, implicit $eax
    IDIV32r killed renamable $esi, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
    MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
    renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.tevirp.addr)
    CMP32mi killed renamable $rax, 1, $noreg, 0, $noreg, 17, implicit-def $eflags :: (load (s32) from %ir.4)
    JCC_1 %bb.2, 13, implicit killed $eflags

    ; CHECK: frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK: frame-setup CFI_INSTRUCTION offset $rbp, -16
    ; CHECK: $rbp = frame-setup MOV64rr $rsp
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    ; CHECK: MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rdi :: (store (s64) into %ir.tevirp.addr)
    ; CHECK: MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.res)
    ; CHECK: renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.tevirp.addr)
    ; CHECK: renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.0)
    ; CHECK: renamable $ecx = MOV32ri 10
    ; CHECK: CDQ implicit-def $eax, implicit-def $edx, implicit $eax
    ; CHECK: IDIV32r killed renamable $ecx, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
    ; CHECK: MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edx :: (store (s32) into %ir.privet)
    ; CHECK: renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.tevirp.addr)
    ; CHECK: renamable $eax = MOV32rm renamable $rcx, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
    ; CHECK: renamable $esi = MOV32ri 10
    ; CHECK: CDQ implicit-def $eax, implicit-def $edx, implicit $eax
    ; CHECK: IDIV32r killed renamable $esi, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
    ; CHECK: MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
    ; CHECK: renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.tevirp.addr)
    ; CHECK: CMP32mi killed renamable $rax, 1, $noreg, 0, $noreg, 17, implicit-def $eflags :: (load (s32) from %ir.4)
    ; CHECK: ADD64ri32 22, &ic, implicit-def $eflags
    ; CHECK: JCC_1 %bb.2, 13, implicit killed $eflags
  
  bb.1.if.then:
    successors: %bb.3(0x80000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.privet)
    MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.res)
    JMP_1 %bb.3

    ; CHECK: renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.privet)
    ; CHECK: MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.res)
    ; CHECK: ADD64ri32 3, &ic, implicit-def $eflags
    ; CHECK: JMP_1 %bb.3
  
  bb.2.if.else:
    successors: %bb.3(0x80000000)
  
    renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.tevirp.addr)
    renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.7)
    MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.res)

    ; CHECK: renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.tevirp.addr)
    ; CHECK: renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.7)
    ; CHECK: MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.res)
    ; CHECK: ADD64ri32 3, &ic, implicit-def $eflags

  bb.3.if.end:
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.res)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $eax

    ; CHECK: renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.res)
    ; CHECK: $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    ; CHECK: frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    ; CHECK: ADD64ri32 4, &ic, implicit-def $eflags
    ; CHECK: RET64 implicit $eax

...
---
name:            _Z5FuncTest3i
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$edi', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: par.addr, type: default, offset: -24, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: res, type: default, offset: -17, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $edi
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.par.addr)
    MOV8mi $rbp, 1, $noreg, -1, $noreg, 0 :: (store (s8) into %ir.res)
    CMP32mi $rbp, 1, $noreg, -8, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.par.addr)
    JCC_1 %bb.2, 14, implicit killed $eflags

    ; CHECK: frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK: frame-setup CFI_INSTRUCTION offset $rbp, -16
    ; CHECK: $rbp = frame-setup MOV64rr $rsp
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    ; CHECK: MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.par.addr)
    ; CHECK: MOV8mi $rbp, 1, $noreg, -1, $noreg, 0 :: (store (s8) into %ir.res)
    ; CHECK: CMP32mi $rbp, 1, $noreg, -8, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.par.addr)
    ; CHECK: ADD64ri32 9, &ic, implicit-def $eflags
    ; CHECK: JCC_1 %bb.2, 14, implicit killed $eflags
  
  bb.1.if.then:
    successors: %bb.2(0x80000000)
  
    MOV8mi $rbp, 1, $noreg, -1, $noreg, 1 :: (store (s8) into %ir.res)

    ; CHECK: MOV8mi $rbp, 1, $noreg, -1, $noreg, 1 :: (store (s8) into %ir.res)
    ; CHECK: ADD64ri32 1, &ic, implicit-def $eflags
  
  bb.2.if.end:
    renamable $al = MOV8rm $rbp, 1, $noreg, -1, $noreg :: (load (s8) from %ir.res)
    renamable $al = AND8ri killed renamable $al, 1, implicit-def dead $eflags
    renamable $eax = MOVZX32rr8 killed renamable $al
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $eax

    ; CHECK: renamable $al = MOV8rm $rbp, 1, $noreg, -1, $noreg :: (load (s8) from %ir.res)
    ; CHECK: renamable $al = AND8ri killed renamable $al, 1, implicit-def dead $eflags
    ; CHECK: renamable $eax = MOVZX32rr8 killed renamable $al
    ; CHECK: $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    ; CHECK: frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    ; CHECK: ADD64ri32 6, &ic, implicit-def $eflags
    ; CHECK: RET64 implicit $eax

...
