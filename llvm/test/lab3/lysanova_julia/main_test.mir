# COM: llc --march=x86-64 --mtriple x86_64-unknown-linux-gnu --simplify-mir --stop-after=finalize-isel 'test.ll' -o '%s.mir'

# RUN: llc --march=x86-64 --mtriple x86_64-unknown-linux-gnu --simplify-mir \
# RUN: --load=%llvmshlibdir/X86LysanovaInstCounter%shlibext -run-pass=x86-lysanova-mir-counter  %s -o - | FileCheck %s

# TEST_1

# int func(int a, int b, int c) {
#     int d = 0;
#     for (int i = 0; i < a; i++) {
#         if (d < b)
#             d += c;
#     }
#     return d;
# }

# TEST_2

# int factorial(int n) {
#     if (n <= 1) return 1;
#     return n * factorial(n - 1);
# }

# TEST_3

# int loop(int a, int b, int n) {
#     int res = 0;
#     if (a < b) {
#         for (int i = 0; i < n; ++i) {
#             res *= 2;       
#         }
#     }
#     else {
#         while (a >= b) {
#             b--;
#             res += a - b;
#         }
#     }
#     return res;
# }

--- |
  ; ModuleID = '/home/sturmannn/Translators/llvm-nnsu-2024/llvm/test/lab3/lysanova_julia/ll_test.ll'
  source_filename = "/home/sturmannn/Translators/llvm-nnsu-2024/llvm/test/lab3/lysanova_julia/test.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z4funciii(i32 noundef %a, i32 noundef %b, i32 noundef %c) #0 {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    %c.addr = alloca i32, align 4
    %d = alloca i32, align 4
    %i = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    store i32 %c, ptr %c.addr, align 4
    store i32 0, ptr %d, align 4
    store i32 0, ptr %i, align 4
    br label %for.cond
  
  for.cond:                                         ; preds = %for.inc, %entry
    %0 = load i32, ptr %i, align 4
    %1 = load i32, ptr %a.addr, align 4
    %cmp = icmp slt i32 %0, %1
    br i1 %cmp, label %for.body, label %for.end
  
  for.body:                                         ; preds = %for.cond
    %2 = load i32, ptr %d, align 4
    %3 = load i32, ptr %b.addr, align 4
    %cmp1 = icmp slt i32 %2, %3
    br i1 %cmp1, label %if.then, label %if.end
  
  if.then:                                          ; preds = %for.body
    %4 = load i32, ptr %c.addr, align 4
    %5 = load i32, ptr %d, align 4
    %add = add nsw i32 %5, %4
    store i32 %add, ptr %d, align 4
    br label %if.end
  
  if.end:                                           ; preds = %if.then, %for.body
    br label %for.inc
  
  for.inc:                                          ; preds = %if.end
    %6 = load i32, ptr %i, align 4
    %inc = add nsw i32 %6, 1
    store i32 %inc, ptr %i, align 4
    br label %for.cond, !llvm.loop !6
  
  for.end:                                          ; preds = %for.cond
    %7 = load i32, ptr %d, align 4
    ret i32 %7
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define dso_local noundef i32 @_Z9factoriali(i32 noundef %n) #1 {
  entry:
    %retval = alloca i32, align 4
    %n.addr = alloca i32, align 4
    store i32 %n, ptr %n.addr, align 4
    %0 = load i32, ptr %n.addr, align 4
    %cmp = icmp sle i32 %0, 1
    br i1 %cmp, label %if.then, label %if.end
  
  if.then:                                          ; preds = %entry
    store i32 1, ptr %retval, align 4
    br label %return
  
  if.end:                                           ; preds = %entry
    %1 = load i32, ptr %n.addr, align 4
    %2 = load i32, ptr %n.addr, align 4
    %sub = sub nsw i32 %2, 1
    %call = call noundef i32 @_Z9factoriali(i32 noundef %sub)
    %mul = mul nsw i32 %1, %call
    store i32 %mul, ptr %retval, align 4
    br label %return
  
  return:                                           ; preds = %if.end, %if.then
    %3 = load i32, ptr %retval, align 4
    ret i32 %3
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z4loopiii(i32 noundef %a, i32 noundef %b, i32 noundef %n) #0 {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    %n.addr = alloca i32, align 4
    %res = alloca i32, align 4
    %i = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    store i32 %n, ptr %n.addr, align 4
    store i32 0, ptr %res, align 4
    %0 = load i32, ptr %a.addr, align 4
    %1 = load i32, ptr %b.addr, align 4
    %cmp = icmp slt i32 %0, %1
    br i1 %cmp, label %if.then, label %if.else
  
  if.then:                                          ; preds = %entry
    store i32 0, ptr %i, align 4
    br label %for.cond
  
  for.cond:                                         ; preds = %for.inc, %if.then
    %2 = load i32, ptr %i, align 4
    %3 = load i32, ptr %n.addr, align 4
    %cmp1 = icmp slt i32 %2, %3
    br i1 %cmp1, label %for.body, label %for.end
  
  for.body:                                         ; preds = %for.cond
    %4 = load i32, ptr %res, align 4
    %mul = mul nsw i32 %4, 2
    store i32 %mul, ptr %res, align 4
    br label %for.inc
  
  for.inc:                                          ; preds = %for.body
    %5 = load i32, ptr %i, align 4
    %inc = add nsw i32 %5, 1
    store i32 %inc, ptr %i, align 4
    br label %for.cond, !llvm.loop !8
  
  for.end:                                          ; preds = %for.cond
    br label %if.end
  
  if.else:                                          ; preds = %entry
    br label %while.cond
  
  while.cond:                                       ; preds = %while.body, %if.else
    %6 = load i32, ptr %a.addr, align 4
    %7 = load i32, ptr %b.addr, align 4
    %cmp2 = icmp sge i32 %6, %7
    br i1 %cmp2, label %while.body, label %while.end
  
  while.body:                                       ; preds = %while.cond
    %8 = load i32, ptr %b.addr, align 4
    %dec = add nsw i32 %8, -1
    store i32 %dec, ptr %b.addr, align 4
    %9 = load i32, ptr %a.addr, align 4
    %10 = load i32, ptr %b.addr, align 4
    %sub = sub nsw i32 %9, %10
    %11 = load i32, ptr %res, align 4
    %add = add nsw i32 %11, %sub
    store i32 %add, ptr %res, align 4
    br label %while.cond, !llvm.loop !9
  
  while.end:                                        ; preds = %while.cond
    br label %if.end
  
  if.end:                                           ; preds = %while.end, %for.end
    %12 = load i32, ptr %res, align 4
    ret i32 %12
  }
  
  attributes #0 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}
  !8 = distinct !{!8, !7}
  !9 = distinct !{!9, !7}

...
---
name:            _Z4funciii
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: gr32 }
  - { id: 1, class: gr32 }
  - { id: 2, class: gr32 }
  - { id: 3, class: gr32 }
  - { id: 4, class: gr32 }
  - { id: 5, class: gr32 }
  - { id: 6, class: gr32 }
  - { id: 7, class: gr32 }
  - { id: 8, class: gr32 }
  - { id: 9, class: gr32 }
  - { id: 10, class: gr32 }
  - { id: 11, class: gr32 }
  - { id: 12, class: gr32 }
  - { id: 13, class: gr32 }
  - { id: 14, class: gr32 }
  - { id: 15, class: gr32 }
  - { id: 16, class: gr32 }
  - { id: 17, class: gr32 }
  - { id: 18, class: gr32 }
  - { id: 19, class: gr32 }
  - { id: 20, class: gr32 }
  - { id: 21, class: gr32 }
  - { id: 22, class: gr32 }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%2' }
  - { reg: '$edx', virtual-reg: '%4' }
frameInfo:
  maxAlignment:    4
stack:
  - { id: 0, name: a.addr, size: 4, alignment: 4 }
  - { id: 1, name: b.addr, size: 4, alignment: 4 }
  - { id: 2, name: c.addr, size: 4, alignment: 4 }
  - { id: 3, name: d, size: 4, alignment: 4 }
  - { id: 4, name: i, size: 4, alignment: 4 }
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $edi, $esi, $edx
  
    %4:gr32 = COPY $edx
    %2:gr32 = COPY $esi
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    %3:gr32 = COPY killed %2
    %5:gr32 = COPY killed %4
    MOV32mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.a.addr)
    MOV32mr %stack.1.b.addr, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.b.addr)
    MOV32mr %stack.2.c.addr, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.c.addr)
    MOV32mi %stack.3.d, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.d)
    MOV32mi %stack.4.i, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.i)

    ; CHECK-LABEL:  %23:gr64_ad = MOV64ri 0
    ; CHECK-NEXT:  %24:gr64_ad = MOV64ri @ic
    ; CHECK-NEXT:  %4:gr32 = COPY $edx
    ; CHECK-NEXT:  %2:gr32 = COPY $esi
    ; CHECK-NEXT:  %0:gr32 = COPY $edi
    ; CHECK-NEXT:  %1:gr32 = COPY killed %0
    ; CHECK-NEXT:  %3:gr32 = COPY killed %2
    ; CHECK-NEXT:  %5:gr32 = COPY killed %4
    ; CHECK-NEXT:  MOV32mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.a.addr)
    ; CHECK-NEXT:  MOV32mr %stack.1.b.addr, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.b.addr)
    ; CHECK-NEXT:  MOV32mr %stack.2.c.addr, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.c.addr)
    ; CHECK-NEXT:  MOV32mi %stack.3.d, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.d)
    ; CHECK-NEXT:  MOV32mi %stack.4.i, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.i)
    ; CHECK-NEXT:  %23:gr64_ad = ADD64ri32 %23, 11, implicit-def $eflags

  
  bb.1.for.cond:
    %8:gr32 = MOV32rm %stack.4.i, 1, $noreg, 0, $noreg :: (load (s32) from %ir.i)
    CMP32rm %8, %stack.0.a.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.a.addr)
    JCC_1 %bb.6, 13, implicit $eflags

    ; CHECK-LABEL: %8:gr32 = MOV32rm %stack.4.i, 1, $noreg, 0, $noreg :: (load (s32) from %ir.i)
    ; CHECK-NEXT: CMP32rm %8, %stack.0.a.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.a.addr)
    ; CHECK-NEXT: %23:gr64_ad = ADD64ri32 %23, 3, implicit-def $eflags
    ; CHECK-NEXT: JCC_1 %bb.6, 13, implicit $eflags
  
  bb.2.for.body:
    %13:gr32 = MOV32rm %stack.3.d, 1, $noreg, 0, $noreg :: (load (s32) from %ir.d)
    CMP32rm %13, %stack.1.b.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.b.addr)
    JCC_1 %bb.4, 13, implicit $eflags

    ; CHECK-LABEL: %13:gr32 = MOV32rm %stack.3.d, 1, $noreg, 0, $noreg :: (load (s32) from %ir.d)
    ; CHECK-NEXT: CMP32rm %13, %stack.1.b.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.b.addr)
    ; CHECK-NEXT: %23:gr64_ad = ADD64ri32 %23, 3, implicit-def $eflags
    ; CHECK-NEXT: JCC_1 %bb.4, 13, implicit $eflags
  
  bb.3.if.then:
    %18:gr32 = MOV32rm %stack.2.c.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.c.addr)
    %17:gr32 = ADD32rm %18, %stack.3.d, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.d)
    MOV32mr %stack.3.d, 1, $noreg, 0, $noreg, %17 :: (store (s32) into %ir.d)
  
    ; CHECK-LABEL: %18:gr32 = MOV32rm %stack.2.c.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.c.addr)
    ; CHECK-NEXT: %17:gr32 = ADD32rm %18, %stack.3.d, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.d)
    ; CHECK-NEXT: MOV32mr %stack.3.d, 1, $noreg, 0, $noreg, %17 :: (store (s32) into %ir.d)
    ; CHECK-NEXT: %23:gr64_ad = ADD64ri32 %23, 3, implicit-def $eflags
  
  bb.4.if.end:
    JMP_1 %bb.5

    ; CHECK-LABEL: %23:gr64_ad = ADD64ri32 %23, 1, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.5
  
  bb.5.for.inc:
    %22:gr32 = MOV32rm %stack.4.i, 1, $noreg, 0, $noreg :: (load (s32) from %ir.i)
    %21:gr32 = ADD32ri %22, 1, implicit-def $eflags
    MOV32mr %stack.4.i, 1, $noreg, 0, $noreg, %21 :: (store (s32) into %ir.i)
    JMP_1 %bb.1

    ; CHECK-LABEL: %22:gr32 = MOV32rm %stack.4.i, 1, $noreg, 0, $noreg :: (load (s32) from %ir.i)
    ; CHECK-NEXT: %21:gr32 = ADD32ri %22, 1, implicit-def $eflags
    ; CHECK-NEXT: MOV32mr %stack.4.i, 1, $noreg, 0, $noreg, %21 :: (store (s32) into %ir.i)
    ; CHECK-NEXT: %23:gr64_ad = ADD64ri32 %23, 4, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.1
  
  bb.6.for.end:
    %10:gr32 = MOV32rm %stack.3.d, 1, $noreg, 0, $noreg :: (load (s32) from %ir.d)
    $eax = COPY %10
    RET64 implicit $eax

    ; CHECK-LABEL: %10:gr32 = MOV32rm %stack.3.d, 1, $noreg, 0, $noreg :: (load (s32) from %ir.d)
    ; CHECK-NEXT: $eax = COPY %10
    ; CHECK-NEXT: %23:gr64_ad = ADD64ri32 %23, 3, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %24, 1, $noreg, 0, $noreg, %23
    ; CHECK-NEXT: RET64 implicit $eax

...
---
name:            _Z9factoriali
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: gr32 }
  - { id: 1, class: gr32 }
  - { id: 2, class: gr32 }
  - { id: 3, class: gr32 }
  - { id: 4, class: gr32 }
  - { id: 5, class: gr32 }
  - { id: 6, class: gr32 }
  - { id: 7, class: gr32 }
  - { id: 8, class: gr32 }
  - { id: 9, class: gr32 }
  - { id: 10, class: gr32 }
  - { id: 11, class: gr32 }
  - { id: 12, class: gr32 }
  - { id: 13, class: gr32 }
  - { id: 14, class: gr32 }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  maxAlignment:    4
  hasCalls:        true
stack:
  - { id: 0, name: retval, size: 4, alignment: 4 }
  - { id: 1, name: n.addr, size: 4, alignment: 4 }
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $edi
  
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    MOV32mr %stack.1.n.addr, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.n.addr)
    CMP32mi %stack.1.n.addr, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s32) from %ir.n.addr)
    JCC_1 %bb.2, 15, implicit $eflags

    ; CHECK-LABEL: %15:gr64_ad = MOV64ri 0
    ; CHECK-NEXT: %16:gr64_ad = MOV64ri @ic
    ; CHECK-NEXT: %0:gr32 = COPY $edi
    ; CHECK-NEXT: %1:gr32 = COPY killed %0
    ; CHECK-NEXT: MOV32mr %stack.1.n.addr, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.n.addr)
    ; CHECK-NEXT: CMP32mi %stack.1.n.addr, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s32) from %ir.n.addr)
    ; CHECK-NEXT: %15:gr64_ad = ADD64ri32 %15, 5, implicit-def $eflags
    ; CHECK-NEXT: JCC_1 %bb.2, 15, implicit $eflags
  
  bb.1.if.then:
    MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.retval)
    JMP_1 %bb.3

    ; CHECK-LABEL: MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.retval)
    ; CHECK-NEXT: %15:gr64_ad = ADD64ri32 %15, 2, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.3
  
  bb.2.if.end:
    %12:gr32 = MOV32rm %stack.1.n.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.n.addr)
    %11:gr32 = MOV32rm %stack.1.n.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.n.addr)
    %10:gr32 = SUB32ri %11, 1, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $edi = COPY %10
    CALL64pcrel32 @_Z9factoriali, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr32 = COPY $eax
    %6:gr32 = IMUL32rr %12, %8, implicit-def $eflags
    MOV32mr %stack.0.retval, 1, $noreg, 0, $noreg, %6 :: (store (s32) into %ir.retval)

    ; CHECK-LABEL: %12:gr32 = MOV32rm %stack.1.n.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.n.addr)
    ; CHECK-NEXT: %11:gr32 = MOV32rm %stack.1.n.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.n.addr)
    ; CHECK-NEXT: %10:gr32 = SUB32ri %11, 1, implicit-def $eflags
    ; CHECK-NEXT: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ; CHECK-NEXT: $edi = COPY %10
    ; CHECK-NEXT: CALL64pcrel32 @_Z9factoriali, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
    ; CHECK-NEXT: ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ; CHECK-NEXT: %8:gr32 = COPY $eax
    ; CHECK-NEXT: %6:gr32 = IMUL32rr %12, %8, implicit-def $eflags
    ; CHECK-NEXT: MOV32mr %stack.0.retval, 1, $noreg, 0, $noreg, %6 :: (store (s32) into %ir.retval)
    ; CHECK-NEXT: %15:gr64_ad = ADD64ri32 %15, 10, implicit-def $eflags
  
  bb.3.return:
    %14:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (load (s32) from %ir.retval)
    $eax = COPY %14
    RET64 implicit $eax

    ; CHECK-LABEL: %14:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (load (s32) from %ir.retval)
    ; CHECK-NEXT: $eax = COPY %14
    ; CHECK-NEXT: %15:gr64_ad = ADD64ri32 %15, 3, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %16, 1, $noreg, 0, $noreg, %15
    ; CHECK-NEXT: RET64 implicit $eax

...
---
name:            _Z4loopiii
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: gr32 }
  - { id: 1, class: gr32 }
  - { id: 2, class: gr32 }
  - { id: 3, class: gr32 }
  - { id: 4, class: gr32 }
  - { id: 5, class: gr32 }
  - { id: 6, class: gr32 }
  - { id: 7, class: gr32 }
  - { id: 8, class: gr32 }
  - { id: 9, class: gr32 }
  - { id: 10, class: gr32 }
  - { id: 11, class: gr32 }
  - { id: 12, class: gr32 }
  - { id: 13, class: gr32 }
  - { id: 14, class: gr32 }
  - { id: 15, class: gr32 }
  - { id: 16, class: gr32 }
  - { id: 17, class: gr32 }
  - { id: 18, class: gr32 }
  - { id: 19, class: gr32 }
  - { id: 20, class: gr32 }
  - { id: 21, class: gr32 }
  - { id: 22, class: gr32 }
  - { id: 23, class: gr32 }
  - { id: 24, class: gr32 }
  - { id: 25, class: gr32 }
  - { id: 26, class: gr32 }
  - { id: 27, class: gr32 }
  - { id: 28, class: gr32 }
  - { id: 29, class: gr32 }
  - { id: 30, class: gr32 }
  - { id: 31, class: gr32 }
  - { id: 32, class: gr32 }
  - { id: 33, class: gr32 }
  - { id: 34, class: gr32 }
  - { id: 35, class: gr32 }
  - { id: 36, class: gr32 }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%2' }
  - { reg: '$edx', virtual-reg: '%4' }
frameInfo:
  maxAlignment:    4
stack:
  - { id: 0, name: a.addr, size: 4, alignment: 4 }
  - { id: 1, name: b.addr, size: 4, alignment: 4 }
  - { id: 2, name: n.addr, size: 4, alignment: 4 }
  - { id: 3, name: res, size: 4, alignment: 4 }
  - { id: 4, name: i, size: 4, alignment: 4 }
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $edi, $esi, $edx
  
    %4:gr32 = COPY $edx
    %2:gr32 = COPY $esi
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    %3:gr32 = COPY killed %2
    %5:gr32 = COPY killed %4
    MOV32mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.a.addr)
    MOV32mr %stack.1.b.addr, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.b.addr)
    MOV32mr %stack.2.n.addr, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.n.addr)
    MOV32mi %stack.3.res, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.res)
    %8:gr32 = MOV32rm %stack.0.a.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.a.addr)
    CMP32rm %8, %stack.1.b.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.b.addr)
    JCC_1 %bb.6, 13, implicit $eflags

    ; CHECK-LABEL: %37:gr64_ad = MOV64ri 0
    ; CHECK-NEXT: %38:gr64_ad = MOV64ri @ic
    ; CHECK-NEXT: %4:gr32 = COPY $edx
    ; CHECK-NEXT: %2:gr32 = COPY $esi
    ; CHECK-NEXT: %0:gr32 = COPY $edi
    ; CHECK-NEXT: %1:gr32 = COPY killed %0
    ; CHECK-NEXT: %3:gr32 = COPY killed %2
    ; CHECK-NEXT: %5:gr32 = COPY killed %4
    ; CHECK-NEXT: MOV32mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.a.addr)
    ; CHECK-NEXT: MOV32mr %stack.1.b.addr, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.b.addr)
    ; CHECK-NEXT: MOV32mr %stack.2.n.addr, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.n.addr)
    ; CHECK-NEXT: MOV32mi %stack.3.res, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.res)
    ; CHECK-NEXT: %8:gr32 = MOV32rm %stack.0.a.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.a.addr)
    ; CHECK-NEXT: CMP32rm %8, %stack.1.b.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.b.addr)
    ; CHECK-NEXT: %37:gr64_ad = ADD64ri32 %37, 13, implicit-def $eflags
    ; CHECK-NEXT: JCC_1 %bb.6, 13, implicit $eflags
  
  bb.1.if.then:
    MOV32mi %stack.4.i, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.i)

    ; CHECK-LABEL: MOV32mi %stack.4.i, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.i)
    ; CHECK-NEXT: %37:gr64_ad = ADD64ri32 %37, 1, implicit-def $eflags
  
  bb.2.for.cond:
    %26:gr32 = MOV32rm %stack.4.i, 1, $noreg, 0, $noreg :: (load (s32) from %ir.i)
    CMP32rm %26, %stack.2.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.n.addr)
    JCC_1 %bb.5, 13, implicit $eflags

    ; CHECK-LABEL: %26:gr32 = MOV32rm %stack.4.i, 1, $noreg, 0, $noreg :: (load (s32) from %ir.i)
    ; CHECK-NEXT: CMP32rm %26, %stack.2.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.n.addr)
    ; CHECK-NEXT: %37:gr64_ad = ADD64ri32 %37, 3, implicit-def $eflags
    ; CHECK-NEXT: JCC_1 %bb.5, 13, implicit $eflags
  
  bb.3.for.body:
    %32:gr32 = MOV32rm %stack.3.res, 1, $noreg, 0, $noreg :: (load (s32) from %ir.res)
    %31:gr32 = SHL32ri %32, 1, implicit-def $eflags
    MOV32mr %stack.3.res, 1, $noreg, 0, $noreg, %31 :: (store (s32) into %ir.res)

    ; CHECK-LABEL: %32:gr32 = MOV32rm %stack.3.res, 1, $noreg, 0, $noreg :: (load (s32) from %ir.res)
    ; CHECK-NEXT: %31:gr32 = SHL32ri %32, 1, implicit-def $eflags
    ; CHECK-NEXT: MOV32mr %stack.3.res, 1, $noreg, 0, $noreg, %31 :: (store (s32) into %ir.res)
    ; CHECK-NEXT: %37:gr64_ad = ADD64ri32 %37, 3, implicit-def $eflags
  
  bb.4.for.inc:
    %36:gr32 = MOV32rm %stack.4.i, 1, $noreg, 0, $noreg :: (load (s32) from %ir.i)
    %35:gr32 = ADD32ri %36, 1, implicit-def $eflags
    MOV32mr %stack.4.i, 1, $noreg, 0, $noreg, %35 :: (store (s32) into %ir.i)
    JMP_1 %bb.2

    ; CHECK-LABEL: %36:gr32 = MOV32rm %stack.4.i, 1, $noreg, 0, $noreg :: (load (s32) from %ir.i)
    ; CHECK-NEXT: %35:gr32 = ADD32ri %36, 1, implicit-def $eflags
    ; CHECK-NEXT: MOV32mr %stack.4.i, 1, $noreg, 0, $noreg, %35 :: (store (s32) into %ir.i)
    ; CHECK-NEXT: %37:gr64_ad = ADD64ri32 %37, 4, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.2
  
  bb.5.for.end:
    JMP_1 %bb.10

    ; CHECK-LABEL: %37:gr64_ad = ADD64ri32 %37, 1, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.10
  
  bb.6.if.else:
    JMP_1 %bb.7

    ; CHECK-LABEL: %37:gr64_ad = ADD64ri32 %37, 1, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.7
  
  bb.7.while.cond:
    %11:gr32 = MOV32rm %stack.0.a.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.a.addr)
    CMP32rm %11, %stack.1.b.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.b.addr)
    JCC_1 %bb.9, 12, implicit $eflags

    ; CHECK-LABEL: %11:gr32 = MOV32rm %stack.0.a.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.a.addr)
    ; CHECK-NEXT: CMP32rm %11, %stack.1.b.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.b.addr)
    ; CHECK-NEXT: %37:gr64_ad = ADD64ri32 %37, 3, implicit-def $eflags
    ; CHECK-NEXT: JCC_1 %bb.9, 12, implicit $eflags
  
  bb.8.while.body:
    %23:gr32 = MOV32rm %stack.1.b.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.b.addr)
    %22:gr32 = ADD32ri %23, -1, implicit-def $eflags
    MOV32mr %stack.1.b.addr, 1, $noreg, 0, $noreg, %22 :: (store (s32) into %ir.b.addr)
    %19:gr32 = MOV32rm %stack.0.a.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.a.addr)
    %18:gr32 = SUB32rm %19, %stack.1.b.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.b.addr)
    %15:gr32 = ADD32rm %18, %stack.3.res, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.res)
    MOV32mr %stack.3.res, 1, $noreg, 0, $noreg, %15 :: (store (s32) into %ir.res)
    JMP_1 %bb.7

    ; CHECK-LABEL: %23:gr32 = MOV32rm %stack.1.b.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.b.addr)
    ; CHECK-NEXT: %22:gr32 = ADD32ri %23, -1, implicit-def $eflags
    ; CHECK-NEXT: MOV32mr %stack.1.b.addr, 1, $noreg, 0, $noreg, %22 :: (store (s32) into %ir.b.addr)
    ; CHECK-NEXT: %19:gr32 = MOV32rm %stack.0.a.addr, 1, $noreg, 0, $noreg :: (load (s32) from %ir.a.addr)
    ; CHECK-NEXT: %18:gr32 = SUB32rm %19, %stack.1.b.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.b.addr)
    ; CHECK-NEXT: %15:gr32 = ADD32rm %18, %stack.3.res, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.res)
    ; CHECK-NEXT: MOV32mr %stack.3.res, 1, $noreg, 0, $noreg, %15 :: (store (s32) into %ir.res)
    ; CHECK-NEXT: %37:gr64_ad = ADD64ri32 %37, 8, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.7
  
  bb.9.while.end:
    JMP_1 %bb.10

    ; CHECK-LABEL: %37:gr64_ad = ADD64ri32 %37, 1, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.10
  
  bb.10.if.end:
    %28:gr32 = MOV32rm %stack.3.res, 1, $noreg, 0, $noreg :: (load (s32) from %ir.res)
    $eax = COPY %28
    RET64 implicit $eax

    ; CHECK-LABEL: %28:gr32 = MOV32rm %stack.3.res, 1, $noreg, 0, $noreg :: (load (s32) from %ir.res)
    ; CHECK-NEXT: $eax = COPY %28
    ; CHECK-NEXT: %37:gr64_ad = ADD64ri32 %37, 3, implicit-def $eflags
    ; CHECK-NEXT: MOV64mr %38, 1, $noreg, 0, $noreg, %37
    ; CHECK-NEXT: RET64 implicit $eax

...
