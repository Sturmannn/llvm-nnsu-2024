# RUN: llc -mtriple x86_64-unknown-linux-gnu --load=%llvmshlibdir/X86MortinaMulAddPass%shlibext -run-pass=x86-mortina-muladd-pass  %s -o - | FileCheck %s

#  __m128d test1(__m128d x, __m128d y, __m128d z) {
#    __m128d res = x * y + z;
#    return res;
#  }
 
# __m128d test2(__m128d x, __m128d y, __m128d z) {
#   __m128d tmp = x * z + y;
#   return tmp * z + y;
# }
 
# __m128d test3(__m128d x, __m128d y, __m128d z) {
#   __m128d tmp = x * z;
#   tmp = tmp / y;
#   return tmp + y;
# }
 
# __m128d test4(__m128d x, __m128d y, __m128d z) {
#   __m128d tmp = x * y;
#   __m128d tmp2 = y + x - z;
#   return tmp + z + tmp2;
# }
 
# __m128d test5(__m128d x, __m128d y, __m128d z) {
#   __m128d tmp = x * y;
#   __m128d tmp2 = tmp + z;
#   return tmp * z;
# }


--- |
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  ; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef <2 x double> @_Z5test1Dv2_dS_S_(<2 x double> noundef %x, <2 x double> noundef %y, <2 x double> noundef %z) local_unnamed_addr #0 {
  entry:
    %0 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %x, <2 x double> %y, <2 x double> %z)
    ret <2 x double> %0
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare <2 x double> @llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>) #1
  
  ; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef <2 x double> @_Z5test2Dv2_dS_S_(<2 x double> noundef %x, <2 x double> noundef %y, <2 x double> noundef %z) local_unnamed_addr #0 {
  entry:
    %0 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %x, <2 x double> %z, <2 x double> %y)
    %1 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %0, <2 x double> %z, <2 x double> %y)
    ret <2 x double> %1
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef <2 x double> @_Z5test3Dv2_dS_S_(<2 x double> noundef %x, <2 x double> noundef %y, <2 x double> noundef %z) local_unnamed_addr #2 {
  entry:
    %mul = fmul <2 x double> %x, %z
    %div = fdiv <2 x double> %mul, %y
    %add = fadd <2 x double> %div, %y
    ret <2 x double> %add
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef <2 x double> @_Z5test4Dv2_dS_S_(<2 x double> noundef %x, <2 x double> noundef %y, <2 x double> noundef %z) local_unnamed_addr #2 {
  entry:
    %mul = fmul <2 x double> %x, %y
    %add = fadd <2 x double> %x, %y
    %sub = fsub <2 x double> %add, %z
    %add1 = fadd <2 x double> %mul, %z
    %add2 = fadd <2 x double> %add1, %sub
    ret <2 x double> %add2
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef <2 x double> @_Z5test5Dv2_dS_S_(<2 x double> noundef %x, <2 x double> noundef %y, <2 x double> noundef %z) local_unnamed_addr #2 {
  entry:
    %mul = fmul <2 x double> %x, %y
    %mul1 = fmul <2 x double> %mul, %z
    ret <2 x double> %mul1
  }
  
  attributes #0 = { mustprogress nofree nosync nounwind willreturn memory(none) uwtable "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
  attributes #2 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}

...
---
name:            _Z5test1Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2
  
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    RET64 $xmm0

    ; CHECK: $xmm0 = VFMADD213PDr $xmm0, $xmm1, $xmm2, implicit $mxcsr
    ; CHECK-NEXT: RET64 $xmm0    

...
---
name:            _Z5test2Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2
  
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, renamable $xmm2, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    RET64 $xmm0

    ; CHECK: $xmm0 = VFMADD213PDr $xmm0, $xmm2, $xmm1, implicit $mxcsr
    ; CHECK-NEXT: $xmm0 = VFMADD213PDr $xmm0, $xmm2, $xmm1, implicit $mxcsr
    ; CHECK-NEXT: RET64 $xmm0

...
---
name:            _Z5test3Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2
  
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    renamable $xmm0 = nofpexcept DIVPDrr killed renamable $xmm0, renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    RET64 $xmm0

    ; CHECK: renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    ; CHECK-NEXT: renamable $xmm0 = nofpexcept DIVPDrr killed renamable $xmm0, renamable $xmm1, implicit $mxcsr
    ; CHECK-NEXT: renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    ; CHECK-NEXT: RET64 $xmm0    

...
---
name:            _Z5test4Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2
  
    $xmm3 = MOVAPDrr $xmm0
    renamable $xmm3 = nofpexcept MULPDrr killed renamable $xmm3, renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept SUBPDrr killed renamable $xmm0, renamable $xmm2, implicit $mxcsr
    renamable $xmm3 = nofpexcept ADDPDrr killed renamable $xmm3, killed renamable $xmm2, implicit $mxcsr
    renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm3, implicit $mxcsr
    RET64 $xmm0

    ; CHECK: $xmm3 = MOVAPDrr $xmm0
    ; CHECK-NEXT: $xmm3 = VFMADD213PDr $xmm3, $xmm1, $xmm2, implicit $mxcsr
    ; CHECK-NEXT: renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    ; CHECK-NEXT: renamable $xmm0 = nofpexcept SUBPDrr killed renamable $xmm0, renamable $xmm2, implicit $mxcsr
    ; CHECK-NEXT: renamable $xmm0 = nofpexcept ADDPDrr killed renamable $xmm0, killed renamable $xmm3, implicit $mxcsr
    ; CHECK-NEXT: RET64 $xmm0    

...
---
name:            _Z5test5Dv2_dS_S_
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
tracksDebugUserValues: true
liveins:
  - { reg: '$xmm0' }
  - { reg: '$xmm1' }
  - { reg: '$xmm2' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2
  
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    RET64 $xmm0

    ; CHECK: renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    ; CHECK-NEXT: renamable $xmm0 = nofpexcept MULPDrr killed renamable $xmm0, killed renamable $xmm2, implicit $mxcsr
    ; CHECK-NEXT: RET64 $xmm0

...
