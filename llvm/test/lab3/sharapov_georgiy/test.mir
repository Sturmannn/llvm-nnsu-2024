# RUN: llc -mtriple x86_64-unknown-linux-gnu --load=%llvmshlibdir/X86MulattoPass%shlibext -run-pass=x86-mulatto-pass %s -o - | FileCheck %s

# clang -O2 -emit-llvm -S 1.c -o 2_1.ll
# llc -simplify-mir -march=x86-64 2_1.ll -stop-after=x86-isel -o test.mir


# #include <immintrin.h>

# // 1

# __m128d basic_opt(__m128d a1, __m128d a2, __m128d a3, __m128d a4) {        
#     __m128d res = _mm_setzero_pd();
#     
#     __m128d tmp = a1 * a2;
#     res = tmp + a3;
#     
#     return res;
# }

# // 2

# __m128d no_opt_read(__m128d a1, __m128d a2, __m128d a3, __m128d a4) {        
#     __m128d res = _mm_setzero_pd();
# 
#     __m128d tmp = a1 * a2;
# 
#     __m128d smth = tmp / a3; 
# 
#     res = tmp + a3;
#     
#     return res + smth;
# }

# // 3

# __m128d no_opt_changed(__m128d a1, __m128d a2, __m128d a3, __m128d a4) {        
#     __m128d res = _mm_setzero_pd();
# 
#     __m128d tmp = a1 * a2;
# 
#     tmp = a1 + a2;
# 
#     res = tmp + a3;
#     
#     return res + tmp;
# }

# // 4

# __m128d multiple_opt(__m128d a1, __m128d a2, __m128d a3, __m128d a4) {        
#     __m128d tmp1 = _mm_setzero_pd();
#     __m128d tmp2 = _mm_setzero_pd();
#     __m128d tmp3 = _mm_setzero_pd();
#     __m128d res1 = _mm_setzero_pd();
#     __m128d res2 = _mm_setzero_pd();
#     __m128d res3 = _mm_setzero_pd();
# 
#     tmp1 = a2 * a3; 
#     tmp2 = a1 * a2; 
# 
#     res1 = tmp1 + a1;
#     res2 = tmp2 + a2;
# 
#     tmp3 = a3 * a1; 
#     res3 = tmp3 + a3;
# 
#     return res1 + res2 + res3;
# }

# // 5

# __m128d no_opt_and_mult_opt(__m128d a1, __m128d a2, __m128d a3, __m128d a4) {        
#     __m128d tmp1 = _mm_setzero_pd();
#     __m128d tmp2 = _mm_setzero_pd();
#     __m128d tmp3 = _mm_setzero_pd();
#     __m128d res1 = _mm_setzero_pd();
#     __m128d res2 = _mm_setzero_pd();
#     __m128d res3 = _mm_setzero_pd();
# 
#     tmp1 = a2 * a3; 
#     tmp2 = a1 * a2; 
# 
#     tmp3 = a3 * a1; 
#     __m128d smth = tmp3 / a3; 
#     res3 = tmp3 + a3;
# 
#     res1 = tmp1 + a1;
#     res2 = tmp2 + a2;
# 
#     return res1 + res2 + res3 + smth;
# }
# 
# // 6
# 
# __m128d sixth_test(__m128d a1, __m128d a2, __m128d a3, __m128d a4) {        
#     __m128d tmp1 = _mm_setzero_pd();
#     __m128d tmp2 = _mm_setzero_pd();
#     __m128d tmp3 = _mm_setzero_pd();
#     __m128d res1 = _mm_setzero_pd();
#     __m128d res2 = _mm_setzero_pd();
#     __m128d res3 = _mm_setzero_pd();
# 
#     tmp1 = a2 * a3; 
#     tmp2 = a1 * a2; 
# 
#     tmp3 = a3 * a1; 
#     res3 = tmp3 + a3;
# 	__m128d smth = tmp3 / a3; 
# 
#     res1 = tmp1 + a1;
#     res2 = tmp2 + a2;
# 
#     return res1 + res2 + res3 + smth;
# }
# 

--- |
  ; ModuleID = '2.ll'
  source_filename = "./1.c"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"

  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local <2 x double> @basic_opt(<2 x double> noundef %0, <2 x double> noundef %1, <2 x double> noundef %2, <2 x double> noundef %3) local_unnamed_addr #0 {
    %5 = fmul <2 x double> %0, %1
    %6 = fadd <2 x double> %5, %2
    ret <2 x double> %6
  }

  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local <2 x double> @no_opt_read(<2 x double> noundef %0, <2 x double> noundef %1, <2 x double> noundef %2, <2 x double> noundef %3) local_unnamed_addr #0 {
    %5 = fmul <2 x double> %0, %1
    %6 = fdiv <2 x double> %5, %2
    %7 = fadd <2 x double> %5, %2
    %8 = fadd <2 x double> %7, %6
    ret <2 x double> %8
  }

  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local <2 x double> @no_opt_changed(<2 x double> noundef %0, <2 x double> noundef %1, <2 x double> noundef %2, <2 x double> noundef %3) local_unnamed_addr #0 {
    %5 = fadd <2 x double> %0, %1
    %6 = fadd <2 x double> %5, %2
    %7 = fadd <2 x double> %5, %6
    ret <2 x double> %7
  }

  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local <2 x double> @multiple_opt(<2 x double> noundef %0, <2 x double> noundef %1, <2 x double> noundef %2, <2 x double> noundef %3) local_unnamed_addr #0 {
    %5 = fmul <2 x double> %1, %2
    %6 = fmul <2 x double> %0, %1
    %7 = fadd <2 x double> %5, %0
    %8 = fadd <2 x double> %6, %1
    %9 = fmul <2 x double> %0, %2
    %10 = fadd <2 x double> %9, %2
    %11 = fadd <2 x double> %8, %7
    %12 = fadd <2 x double> %10, %11
    ret <2 x double> %12
  }

  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local <2 x double> @no_opt_and_mult_opt(<2 x double> noundef %0, <2 x double> noundef %1, <2 x double> noundef %2, <2 x double> noundef %3) local_unnamed_addr #0 {
    %5 = fmul <2 x double> %1, %2
    %6 = fmul <2 x double> %0, %1
    %7 = fmul <2 x double> %0, %2
    %8 = fdiv <2 x double> %7, %2
    %9 = fadd <2 x double> %7, %2
    %10 = fadd <2 x double> %5, %0
    %11 = fadd <2 x double> %6, %1
    %12 = fadd <2 x double> %11, %10
    %13 = fadd <2 x double> %9, %12
    %14 = fadd <2 x double> %8, %13
    ret <2 x double> %14
  }

  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local <2 x double> @sixth_test(<2 x double> noundef %0, <2 x double> noundef %1, <2 x double> noundef %2, <2 x double> noundef %3) local_unnamed_addr #0 {
    %5 = fmul <2 x double> %1, %2
    %6 = fmul <2 x double> %0, %1
    %7 = fmul <2 x double> %0, %2
    %8 = fadd <2 x double> %7, %2
    %9 = fdiv <2 x double> %7, %2
    %10 = fadd <2 x double> %5, %0
    %11 = fadd <2 x double> %6, %1
    %12 = fadd <2 x double> %11, %10
    %13 = fadd <2 x double> %8, %12
    %14 = fadd <2 x double> %9, %13
    ret <2 x double> %14
  }

  attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

  !llvm.module.flags = !{!0, !1, !2, !3}
  !llvm.ident = !{!4}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 1}
  !4 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}

...
---
name:            basic_opt
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
registers:
  - { id: 0, class: vr128 }
  - { id: 1, class: vr128 }
  - { id: 2, class: vr128 }
  - { id: 3, class: vr128 }
  - { id: 4, class: vr128 }
  - { id: 5, class: vr128 }
liveins:
  - { reg: '$xmm0', virtual-reg: '%0' }
  - { reg: '$xmm1', virtual-reg: '%1' }
  - { reg: '$xmm2', virtual-reg: '%2' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.4):
    liveins: $xmm0, $xmm1, $xmm2
  
    %2:vr128 = COPY $xmm2
    %1:vr128 = COPY $xmm1
    %0:vr128 = COPY $xmm0
    ; CHECK: %0:vr128 = COPY $xmm0
    ; CHECK-NEXT: %5:vr128 = VFMADD213PDr %0, %1, %2, implicit $mxcsr
    ; CHECK-NEXT: $xmm0 = COPY %5
    %4:vr128 = nofpexcept MULPDrr %0, %1, implicit $mxcsr
    %5:vr128 = nofpexcept ADDPDrr %4, %2, implicit $mxcsr
    $xmm0 = COPY %5
    RET 0, $xmm0
...
---
name:            no_opt_read
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
registers:
  - { id: 0, class: vr128 }
  - { id: 1, class: vr128 }
  - { id: 2, class: vr128 }
  - { id: 3, class: vr128 }
  - { id: 4, class: vr128 }
  - { id: 5, class: vr128 }
  - { id: 6, class: vr128 }
  - { id: 7, class: vr128 }
liveins:
  - { reg: '$xmm0', virtual-reg: '%0' }
  - { reg: '$xmm1', virtual-reg: '%1' }
  - { reg: '$xmm2', virtual-reg: '%2' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.4):
    liveins: $xmm0, $xmm1, $xmm2
  
    %2:vr128 = COPY $xmm2
    %1:vr128 = COPY $xmm1
    %0:vr128 = COPY $xmm0
    ; CHECK: %0:vr128 = COPY $xmm0
    ; CHECK-NEXT: %4:vr128 = nofpexcept MULPDrr %0, %1, implicit $mxcsr
    ; CHECK-NEXT: %5:vr128 = nofpexcept DIVPDrr %4, %2, implicit $mxcsr
    ; CHECK-NEXT: %6:vr128 = nofpexcept ADDPDrr %4, %2, implicit $mxcsr
    ; CHECK-NEXT: %7:vr128 = nofpexcept ADDPDrr %6, killed %5, implicit $mxcsr
    ; CHECK-NEXT: $xmm0 = COPY %7
    ; CHECK-NEXT: RET 0, $xmm0 
    %4:vr128 = nofpexcept MULPDrr %0, %1, implicit $mxcsr
    %5:vr128 = nofpexcept DIVPDrr %4, %2, implicit $mxcsr
    %6:vr128 = nofpexcept ADDPDrr %4, %2, implicit $mxcsr
    %7:vr128 = nofpexcept ADDPDrr %6, killed %5, implicit $mxcsr
    $xmm0 = COPY %7
    RET 0, $xmm0
...
---
name:            no_opt_changed
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
registers:
  - { id: 0, class: vr128 }
  - { id: 1, class: vr128 }
  - { id: 2, class: vr128 }
  - { id: 3, class: vr128 }
  - { id: 4, class: vr128 }
  - { id: 5, class: vr128 }
  - { id: 6, class: vr128 }
liveins:
  - { reg: '$xmm0', virtual-reg: '%0' }
  - { reg: '$xmm1', virtual-reg: '%1' }
  - { reg: '$xmm2', virtual-reg: '%2' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.4):
    liveins: $xmm0, $xmm1, $xmm2
  
    %2:vr128 = COPY $xmm2
    %1:vr128 = COPY $xmm1
    %0:vr128 = COPY $xmm0
    ; CHECK: %4:vr128 = nofpexcept ADDPDrr %0, %1, implicit $mxcsr
    ; CHECK-NEXT: %5:vr128 = nofpexcept ADDPDrr %4, %2, implicit $mxcsr
    ; CHECK-NEXT: %6:vr128 = nofpexcept ADDPDrr %4, killed %5, implicit $mxcsr
    ; CHECK-NEXT: $xmm0 = COPY %6
    ; CHECK-NEXT: RET 0, $xmm0
    %4:vr128 = nofpexcept ADDPDrr %0, %1, implicit $mxcsr
    %5:vr128 = nofpexcept ADDPDrr %4, %2, implicit $mxcsr
    %6:vr128 = nofpexcept ADDPDrr %4, killed %5, implicit $mxcsr
    $xmm0 = COPY %6
    RET 0, $xmm0
...
---

name:            multiple_opt
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
registers:
  - { id: 0, class: vr128 }
  - { id: 1, class: vr128 }
  - { id: 2, class: vr128 }
  - { id: 3, class: vr128 }
  - { id: 4, class: vr128 }
  - { id: 5, class: vr128 }
  - { id: 6, class: vr128 }
  - { id: 7, class: vr128 }
  - { id: 8, class: vr128 }
  - { id: 9, class: vr128 }
  - { id: 10, class: vr128 }
  - { id: 11, class: vr128 }
liveins:
  - { reg: '$xmm0', virtual-reg: '%0' }
  - { reg: '$xmm1', virtual-reg: '%1' }
  - { reg: '$xmm2', virtual-reg: '%2' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.4):
    liveins: $xmm0, $xmm1, $xmm2
  
    %2:vr128 = COPY $xmm2
    %1:vr128 = COPY $xmm1
    %0:vr128 = COPY $xmm0
    ; CHECK: %0:vr128 = COPY $xmm0
    ; CHECK-NEXT: %6:vr128 = VFMADD213PDr %1, %2, %0, implicit $mxcsr
    ; CHECK-NEXT: %7:vr128 = VFMADD213PDr %0, %1, %1, implicit $mxcsr
    ; CHECK-NEXT: %9:vr128 = VFMADD213PDr %0, %2, %2, implicit $mxcsr
    ; CHECK-NEXT: %10:vr128 = nofpexcept ADDPDrr %7, killed %6, implicit $mxcsr
    %4:vr128 = nofpexcept MULPDrr %1, %2, implicit $mxcsr
    %5:vr128 = nofpexcept MULPDrr %0, %1, implicit $mxcsr
    %6:vr128 = nofpexcept ADDPDrr %4, %0, implicit $mxcsr
    %7:vr128 = nofpexcept ADDPDrr %5, %1, implicit $mxcsr
    %8:vr128 = nofpexcept MULPDrr %0, %2, implicit $mxcsr
    %9:vr128 = nofpexcept ADDPDrr %8, %2, implicit $mxcsr
    %10:vr128 = nofpexcept ADDPDrr %7, killed %6, implicit $mxcsr
    %11:vr128 = nofpexcept ADDPDrr %9, killed %10, implicit $mxcsr
    $xmm0 = COPY %11
    RET 0, $xmm0

...
---
name:            no_opt_and_mult_opt
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
registers:
  - { id: 0, class: vr128 }
  - { id: 1, class: vr128 }
  - { id: 2, class: vr128 }
  - { id: 3, class: vr128 }
  - { id: 4, class: vr128 }
  - { id: 5, class: vr128 }
  - { id: 6, class: vr128 }
  - { id: 7, class: vr128 }
  - { id: 8, class: vr128 }
  - { id: 9, class: vr128 }
  - { id: 10, class: vr128 }
  - { id: 11, class: vr128 }
  - { id: 12, class: vr128 }
  - { id: 13, class: vr128 }
liveins:
  - { reg: '$xmm0', virtual-reg: '%0' }
  - { reg: '$xmm1', virtual-reg: '%1' }
  - { reg: '$xmm2', virtual-reg: '%2' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.4):
    liveins: $xmm0, $xmm1, $xmm2
  
    %2:vr128 = COPY $xmm2
    %1:vr128 = COPY $xmm1
    %0:vr128 = COPY $xmm0
    ; CHECK: %0:vr128 = COPY $xmm0
    ; CHECK-NEXT: %9:vr128 = VFMADD213PDr %1, %2, %0, implicit $mxcsr
    ; CHECK-NEXT: %10:vr128 = VFMADD213PDr %0, %1, %1, implicit $mxcsr
    ; CHECK-NEXT: %6:vr128 = nofpexcept MULPDrr %0, %2, implicit $mxcsr
    %4:vr128 = nofpexcept MULPDrr %1, %2, implicit $mxcsr
    %5:vr128 = nofpexcept MULPDrr %0, %1, implicit $mxcsr
    %6:vr128 = nofpexcept MULPDrr %0, %2, implicit $mxcsr
    %7:vr128 = nofpexcept DIVPDrr %6, %2, implicit $mxcsr
    %8:vr128 = nofpexcept ADDPDrr %6, %2, implicit $mxcsr
    %9:vr128 = nofpexcept ADDPDrr %4, %0, implicit $mxcsr
    %10:vr128 = nofpexcept ADDPDrr %5, %1, implicit $mxcsr
    %11:vr128 = nofpexcept ADDPDrr %10, killed %9, implicit $mxcsr
    %12:vr128 = nofpexcept ADDPDrr %8, killed %11, implicit $mxcsr
    %13:vr128 = nofpexcept ADDPDrr %7, killed %12, implicit $mxcsr
    $xmm0 = COPY %13
    RET 0, $xmm0

...
---
name:            sixth_test
alignment:       16
tracksRegLiveness: true
debugInstrRef:   true
registers:
  - { id: 0, class: vr128 }
  - { id: 1, class: vr128 }
  - { id: 2, class: vr128 }
  - { id: 3, class: vr128 }
  - { id: 4, class: vr128 }
  - { id: 5, class: vr128 }
  - { id: 6, class: vr128 }
  - { id: 7, class: vr128 }
  - { id: 8, class: vr128 }
  - { id: 9, class: vr128 }
  - { id: 10, class: vr128 }
  - { id: 11, class: vr128 }
  - { id: 12, class: vr128 }
  - { id: 13, class: vr128 }
liveins:
  - { reg: '$xmm0', virtual-reg: '%0' }
  - { reg: '$xmm1', virtual-reg: '%1' }
  - { reg: '$xmm2', virtual-reg: '%2' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.4):
    liveins: $xmm0, $xmm1, $xmm2
  
    %2:vr128 = COPY $xmm2
    %1:vr128 = COPY $xmm1
    %0:vr128 = COPY $xmm0
    ; CHECK: %0:vr128 = COPY $xmm0
    ; CHECK-NEXT: %9:vr128 = VFMADD213PDr %1, %2, %0, implicit $mxcsr
    ; CHECK-NEXT: %10:vr128 = VFMADD213PDr %0, %1, %1, implicit $mxcsr
    %4:vr128 = nofpexcept MULPDrr %1, %2, implicit $mxcsr
    %5:vr128 = nofpexcept MULPDrr %0, %1, implicit $mxcsr
    %6:vr128 = nofpexcept MULPDrr %0, %2, implicit $mxcsr
    ; CHECK: %6:vr128 = nofpexcept MULPDrr %0, %2, implicit $mxcsr
    ; CHECK-NEXT: %7:vr128 = nofpexcept ADDPDrr %6, %2, implicit $mxcsr
    ; CHECK-NEXT: %8:vr128 = nofpexcept DIVPDrr %6, %2, implicit $mxcsr
    %7:vr128 = nofpexcept ADDPDrr %6, %2, implicit $mxcsr
    %8:vr128 = nofpexcept DIVPDrr %6, %2, implicit $mxcsr
    %9:vr128 = nofpexcept ADDPDrr %4, %0, implicit $mxcsr
    %10:vr128 = nofpexcept ADDPDrr %5, %1, implicit $mxcsr
    %11:vr128 = nofpexcept ADDPDrr %10, killed %9, implicit $mxcsr
    %12:vr128 = nofpexcept ADDPDrr %7, killed %11, implicit $mxcsr
    %13:vr128 = nofpexcept ADDPDrr %8, killed %12, implicit $mxcsr
    $xmm0 = COPY %13
    RET 0, $xmm0

...
